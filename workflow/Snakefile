import pandas as pd
from itertools import chain
import sys
import os
from pathlib import Path

configfile: "config/config.yaml"
configfile: "config/api.yaml"
configfile: "config/solving.yaml"

localrules: all, gsa, ua, clean_all, clean_gsa, clean_ua, clean_generate, test_gsa, test_ua

wildcard_constraints:
    scenario="[a-zA-Z0-9_]+",
    model_run=r"\d+"

SCENARIO = config["scenario"]["name"]

onstart:
    gen_params = Path("results", SCENARIO, "generated", "config", "parameters.csv")
    if not gen_params.exists():
        print("Generate data first with 'snakemake -s Sankefile.generate'")
        raise FileNotFoundError(f"Parameters file not found: {gen_params}")
    else:
        print(f"Parameters file found: {gen_params}")

# manually cleanup temporary networks
# see the following issues on why temp() doesnt work with checkpoints
# https://github.com/snakemake/snakemake/issues/2982
onsuccess:

    # copy network for circular dependency issue
    copy_nc = Path("results", SCENARIO, "copy.nc")
    if copy_nc.exists():    
        shell(f"rm {copy_nc}")

    # networks to remove 
    networks = ["n"]
    if not config["metadata"]["networks"]:
        networks.append("network")

    # pre-solve GSA networks
    gsa_networks = Path("results", SCENARIO, "gsa", "modelruns")
    if gsa_networks.exists():
        for run in gsa_networks.iterdir():
            for network in networks:
                n = Path(run, f"{network}.nc")
                # try/except faster than checking if file exists
                try:
                    os.remove(n)
                except FileNotFoundError:
                    pass
        
    # pre-solve UA networks
    ua_networks = Path("results", SCENARIO, "ua", "modelruns")
    if ua_networks.exists():
        for run in ua_networks.iterdir():
            for network in networks:
                n = Path(run, f"{network}.nc")
                # try/except faster than checking if file exists
                try:
                    os.remove(n)
                except FileNotFoundError:
                    pass

###
# GSA specific parameters
###

def get_gsa_modelruns() -> range:
    """number of gsa model runs"""
    try:
        gsa_params = pd.read_csv(f"results/{SCENARIO}/generated/{config['gsa']['parameters']}")
        gsa_groups = gsa_params.group.unique().tolist()
        return range((len(gsa_groups) + 1) * config["gsa"]["replicates"])
    except FileNotFoundError as e:
        print("Generate data first with 'snakemake -s Sankefile.generate'")
        raise e

def get_gsa_result_files() -> list[str]:
    """All gsa results files"""
    results = pd.read_csv(config["gsa"]["results"])
    return list(set(results.name.to_list()))

def get_gsa_plots() -> list[str]:
    """Gsa plots"""
    results = pd.read_csv(config["gsa"]["results"])
    plots_temp = results.plots.dropna().str.split(";").to_list()
    return list(set(chain(*plots_temp)))

###
# UA specific parameters
###

def get_ua_result_files():
    """All ua results files"""
    results = pd.read_csv(config["uncertainity"]["results"])
    return list(set(results.name.to_list()))

def get_ua_scatterplots():
    """UA scatterplots"""
    return pd.read_csv(config["uncertainity"]["plots"])["plot"].to_list()

def get_ua_barplots():
    """UA barplots"""
    results = pd.read_csv(config["uncertainity"]["results"])
    return results.barplot.dropna().to_list()

def get_ua_modelruns():
    """Number of ua model runs"""
    sampling = config["uncertainity"]["sample"].lower()
    replicates = config["uncertainity"]["replicates"]
    parameters = config["uncertainity"]["parameters"]
    if sampling == 'lhs':
        return range(replicates)
    elif sampling == 'sobol':
        return range((2**replicates) * (len(parameters) + 2))
    else:
        raise ValueError(f"{sampling} is not a valid selection")

###
# Additional rules
###

include: "rules/prepare.smk"
include: "rules/sample.smk"
include: "rules/solve.smk"
include: "rules/results.smk"

###
# Main execution
###

rule all:
    shell:
        "echo Provide target rule. Availabe options are ['snakemake gsa', 'snakemake ua']"

rule gsa:
    input:
        # expand("results/{scenario}/gsa/modelruns/{run}/network.nc", scenario=SCENARIO, run=get_gsa_modelruns()),
        # expand("results/{scenario}/gsa/SA/{result}.csv", scenario=SCENARIO, result=get_gsa_result_files()),
        expand("results/{scenario}/gsa/heatmaps/{plot}.png", scenario=SCENARIO, plot=get_gsa_plots()),
        expand("results/{scenario}/gsa/barplots/{plot}.png", scenario=SCENARIO, plot=get_gsa_plots()),
        expand("results/{scenario}/gsa/rankings.csv", scenario=SCENARIO)

rule ua:
    input:
        # expand("results/{scenario}/ua/modelruns/{run}/network.nc", scenario=SCENARIO, run=UA_MODELRUNS),
        expand("results/{scenario}/ua/scatterplots/{plot}.png", scenario=SCENARIO, plot=get_ua_scatterplots()),
        expand("results/{scenario}/ua/barplots/{plot}.png", scenario=SCENARIO, plot=get_ua_barplots()),

###
# Testing solve resources on hpc
###

rule test_gsa:
    input:
        expand("results/{scenario}/gsa/modelruns/0/network.nc", scenario=SCENARIO)

rule test_ua:
    input:
        expand("results/{scenario}/ua/modelruns/0/network.nc", scenario=SCENARIO)

### 
# Cleaning rules
###

rule clean_all:
    params:
        scenario=config["scenario"]["name"]
    shell:
        "rm -rf results/{params.scenario}/*"

rule clean_gsa:
    params:
        scenario=config["scenario"]["name"]
    shell:
        "rm -rf results/{params.scenario}/gsa/*"

rule clean_ua:
    params:
        scenario=config["scenario"]["name"]
    shell:
        "rm -rf results/{params.scenario}/ua/*"

rule clean_generate:
    shell:
        "rm config/generated_parameters.csv"

rule make_dag:
    shell:
        "snakemake ua --dag | dot -Tpng > dag.png"